# vim:ft=ansible:
---
- name: ensure one bastion host is present
  ec2:
    image: ami-6975eb1e
    instance_type: t2.micro
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    key_name: "{{ key_name }}"
    group: BastionSG
    instance_tags: {Name: "{{ instance_name_prefix }}bastion", Type: Bastion, Stack: "{{ stack }}"}
    assign_public_ip: no 
    profile: "{{ profile }}"
    region: "{{ region }}"
    source_dest_check: False
    wait: yes
    exact_count: 1
    count_tag: {Type: Bastion}
  register: ec2_bastion

- name: associate an elastic IP with the bastion
  ec2_eip: instance_id="{{ ec2_bastion.tagged_instances[0].id }}" ip=54.72.144.181 region="{{ region }}"
  register: eip

- name: output the IP
  debug: msg="Allocated IP inside a VPC is {{ eip.public_ip }}"
  
- name: Set DNS Record for new instance
  route53: 
    # profile: "{{ profile }}"
    # region: "{{ region }}"
    command: create
    overwrite: yes
    zone: "{{ zone }}"
    record: "{{ instance_name_prefix }}bastion.{{ zone }}"
    type: A
    ttl: 7200
    value: "{{ eip.public_ip }}"

- name: ensure the vpc's internet gateway and route tables are present
  ec2_vpc:
    state: present
    region: "{{ region }}"
    profile: "{{ profile }}"
    internet_gateway: True
    resource_tags: { Name: "vpc-{{ name_prefix }}", Stack: "{{ stack }}" }
    cidr_block: 100.0.0.0/16
    wait: yes
    route_tables:
      - subnets:
        - 100.0.16.0/24
        - 100.0.80.0/24
        routes:
        - dest: 0.0.0.0/0
          gw: igw
      - subnets:
        - 100.0.0.0/20
        - 100.0.64.0/20
        routes:
        - dest: 0.0.0.0/0
          gw: "{{ ec2_bastion.tagged_instances[0].id }}"
