# vim:ft=ansible:
---
- name: VPC setup
  hosts: localhost
  gather_facts: False
  vars:
    region: eu-west-1
    profile: pixxis
    name_prefix: dev
    instance_name_prefix: d
    stack: Development
    key_name: TestKP
    zone: pixxis.be
  tasks:

  - name: ensure the vpc, subnets, internet gateway and route table are present
    ec2_vpc:
      state: present
      region: "{{ region }}"
      profile: "{{ profile }}"
      internet_gateway: True
      resource_tags: { Name: "vpc-{{ name_prefix }}", Stack: "{{ stack }}" }
      cidr_block: 100.0.0.0/16
      wait: yes
      subnets:
        - cidr: 100.0.0.0/20
          az: eu-west-1a
          resource_tags: { Name: "{{ name_prefix }}-private-1a", Stack: "{{ stack }}" }
        - cidr: 100.0.16.0/24
          az: eu-west-1a
          resource_tags: { Name: "{{ name_prefix }}-public-1a", Stack: "{{ stack }}" }
        - cidr: 100.0.64.0/20
          az: eu-west-1b
          resource_tags: { Name: "{{ name_prefix }}-private-1b", Stack: "{{ stack }}" }
        - cidr: 100.0.80.0/24
          az: eu-west-1b
          resource_tags: { Name: "{{ name_prefix }}-public-1b", Stack: "{{ stack }}" }
      route_tables:
        - subnets:
          - 100.0.16.0/24
          - 100.0.80.0/24
          routes:
          - dest: 0.0.0.0/0
            gw: igw
    register: vpc

  - debug: var=inventory_file
  - debug: var=inventory_dir
  - debug: var=vpc
  
  - name: add the vpc id to the list of global variables 
    lineinfile:
      dest: "{{ inventory_dir }}/group_vars/all.yml" 
      regexp: "^vpc_id:"
      line: "vpc_id: {{ vpc.vpc_id }}"

  - name: find public subnet 1a
    set_fact: vpc_subnet_id="{{ item.id }}"
    when: item.resource_tags.Name == "{{ name_prefix }}-public-1a"
    with_items: vpc.subnets

  - name: ensure the bastion security group is present
    ec2_group:
      name: BastionSG
      description: Bastion security group
      vpc_id: "{{ vpc.vpc_id }}"
      profile: "{{ profile }}"
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 100.0.0.0/20 
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 100.0.0.0/20
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/22
      rules_egress:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
    register: aws_sg

  - name: tag the bastion security group
    ec2_tag:
      profile: "{{ profile }}"
      resource: "{{aws_sg.group_id}}"
      region: "{{ region }}"
      state: present
      tags:
        Name: "BastionSG"
        Stack: "{{ stack }}"
  
  - name: launch a new bastion host 
    ec2:
      image: ami-6975eb1e
      instance_type: t2.micro
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      key_name: "{{ key_name }}"
      group: BastionSG
      instance_tags: {Name: "{{ instance_name_prefix }}bastion", Type: Bastion, Stack: "{{ stack }}"}
      assign_public_ip: yes
      profile: "{{ profile }}"
      region: "{{ region }}"
      source_dest_check: False
      wait: yes
      exact_count: 1
      count_tag: {Type: Bastion}
    register: ec2_bastion

  - name: Set DNS Record for New Instance
    route53: 
      # profile: "{{ profile }}"
      # region: "{{ region }}"
      command: create
      zone: "{{ zone }}"
      record: "{{ instance_name_prefix }}bastion.{{ zone }}"
      type: A
      ttl: 7200
      value: "{{ ec2_bastion.tagged_instances[0].public_ip }}"
